---
import Header from "components/Header.astro"
import "../style/global.css"
import Fonts from "components/Fonts.astro"
export interface Props {
	title?: string
	description?: string
	author?: string
	keywords?: string[]
}

const { title } = Astro.props
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		{
			Astro.props.author && (
				<meta name="author" content={Astro.props.author} />
			)
		}
		{
			Astro.props.keywords && (
				<meta
					name="keywords"
					content={Astro.props.keywords.join(", ")}
				/>
			)
		}
		{
			Astro.props.description && (
				<meta name="description" content={Astro.props.description} />
			)
		}
		<title>{title ? `${title} ☘️ Dreen` : `Dreen`}</title>

		<script is:inline>
			if (!localStorage.getItem("mode"))
				localStorage.setItem("mode", "system")

			const mode = localStorage.getItem("mode")
			let modeClassName

			if (mode === "system")
				modeClassName =
					globalThis.matchMedia &&
					globalThis.matchMedia("(prefers-color-scheme: dark)")
						.matches
						? "dark"
						: "light"
			else if (mode === "dark") modeClassName = "dark"
			else modeClassName = "light"

			modeClassName &&
				document.documentElement.classList.add(modeClassName)

			globalThis.dreen = { mode }
		</script>

		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />

		<Fonts />
	</head>
	<body>
		<Header />
		<main>
			<slot />
		</main>
	</body><style is:global>
		:root {
		}

		html {
			font-family: var(--serif);
			background-color: var(--bg-color);
			margin-left: 16%;
			margin-right: 16%;
			margin-top: 1%;
		}

		main {
			margin-top: 2%;
			margin-bottom: 30%;
		}

		@media (orientation: portrait) {
			html {
				margin-left: 2%;
				margin-right: 2%;
			}
		}
	</style>
</html>
